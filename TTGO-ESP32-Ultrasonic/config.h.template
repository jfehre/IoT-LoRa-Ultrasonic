// UPDATE WITH YOUR TTN KEYS AND EUIS.

// This EUI must be in little-endian format, so least-significant-byte
// first. When copying an EUI from ttnctl output, this means to reverse
// the bytes. For TTN issued EUIs the last bytes should be 0xD5, 0xB3,
// 0x70.
uint8_t appEui[]= { FILLME };
// This should be in big endian format (msb).
uint8_t devEui[]= { FILLME };
// This key should be in big endian format (or, since it is not really a
// number but a block of memory, endianness does not really apply).
uint8_t appKey[] = { FILLME };

/* ABP para
  These parameters are only needed for LoRaWan_APP.h but you don't need to acutally fill values in
*/
uint8_t nwkSKey[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appSKey[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint32_t devAddr =  ( uint32_t )0x00000000;


//DEFINE PINS
// PINS for trig and echo (used by sensortype TRIG_ECHO)
#define TRIG_PIN    GPIO5    // pin TRIG 
#define ECHO_PIN    GPIO4    // pin ECHO 
// NOT IMPLEMENTED YET PINS for RX and TX (UART Serial) (used by sensortype A02YYUW)
#define RX_PIN      GPIO2    // pin RX
#define TX_PIN      GPIO1    // pin TX 
// POWER PIN
// It is highly recommended to use Vext as power pin. 
// When using another pin, the board will not start with battery on VDD (3.3V) and sensor connected
#define PWR_PIN     Vext    // pin POWER

//DEFINE Sensortype
enum Sensortype {A0YYUW, TRIG_ECHO};
//change this line to define how the measurements are read in the getDistance() function
//static const Sensortype sensor = A0YYUW;
static const Sensortype SENSOR = A0YYUW;

//USE POWER PIN
//if your sensor supports 3.3v you can enable power pin to save even more power during deep sleep
static const bool ENABLE_PWR_PIN = true;

// CYCLE TIME
// Schedule TX every this many seconds (might become longer due to duty
// cycle limitations).
const unsigned TX_INTERVAL = 900;

